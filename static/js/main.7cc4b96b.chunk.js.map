{"version":3,"sources":["components/inputform/input.component.jsx","components/bookmarkitem/bookmarkitem.component.jsx","components/bookmarklist/bookmarklist.component.jsx","App.js","serviceWorker.js","index.js"],"names":["InputForm","this","props","handleName","handleURL","addBookMark","sitename","siteurl","onSubmit","className","type","onChange","placeholder","value","name","Component","BookMarkItem","item","id","href","rel","target","onClick","handleDelete","BookmarkList","bookmarks","map","key","bookmark","App","state","uuid","e","setState","event","preventDefault","newBookMark","updatedBookMarks","filteredItems","filter","localStorage","getItem","JSON","parse","console","log","nextProps","nextstate","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cc4b96b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass InputForm extends Component {\n    render() {\n        const { handleName, handleURL, addBookMark, sitename, siteurl } = this.props;\n        return (\n            <div>\n                <form onSubmit={addBookMark}>\n                    <div className=\"form-group\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            onChange={handleName}\n                            placeholder=\"Enter Site name\"\n                            value={sitename}\n                            name=\"sitename\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            onChange={handleURL}\n                            placeholder=\"Enter URL\"\n                            value={siteurl}\n                            name=\"siteurl\"\n                        />\n\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary\">Add Bookmark</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default InputForm;\n","import React, { Component } from 'react';\nimport './bookmarkitem-styles.css';\n\nclass BookMarkItem extends Component {\n    render() {\n        const { sitename, siteurl, id } = this.props.item;\n        return (\n            <li className=\"bookmarkitem\">\n                <div className=\"row\">\n                    <div className=\"col-md-7\">\n                        {sitename}\n                    </div>\n                    <div className=\"col-md-3\">\n                        <a\n                            href={siteurl}\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                            className=\"btn btn-success\">\n                            Visit\n                        </a>\n                        <button\n                            className=\"btn btn-danger\"\n                            onClick={() => this.props.handleDelete(id)}\n                        >Delete\n                        </button>\n                    </div>\n                </div>\n            </li>\n        )\n    }\n}\nexport default BookMarkItem;","import React, { Component } from 'react'\nimport BookMarkItem from '../bookmarkitem/bookmarkitem.component';\n\n\nclass BookmarkList extends Component {\n    render() {\n        const { handleDelete } = this.props;\n        return this.props.bookmarks.map((item) => (\n\n            <BookMarkItem\n                key={item.id}\n                item={item}\n                bookmark={this.props.bookmark}\n                handleDelete={() => handleDelete(item.id)}\n            />\n\n        ))\n    }\n}\nexport default BookmarkList;","import React, { Component } from 'react';\nimport InputForm from './components/inputform/input.component';\nimport BookmarkList from './components/bookmarklist/bookmarklist.component';\nimport uuid from \"uuid\";\n\nclass App extends Component {\n  state = {\n    sitename: '',\n    siteurl: '',\n    bookmarks: [],\n    id: uuid()\n  }\n\n  UNSAFE_componentWillMount() {\n    localStorage.getItem('bookmarks') && this.setState({\n      bookmarks: JSON.parse(localStorage.getItem('bookmarks'))\n    })\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('bookmarks')) {\n      this.setState({ bookmarks: this.state.bookmarks })\n    } else {\n      console.log('using data from local')\n    }\n  }\n\n  UNSAFE_componentWillUpdate(nextProps, nextstate) {\n    localStorage.setItem('bookmarks', JSON.stringify(nextstate.bookmarks))\n  }\n\n  handleName = (e) => {\n    this.setState({\n      sitename: e.target.value\n    })\n  }\n  handleURL = (e) => {\n    this.setState({\n      siteurl: e.target.value\n    })\n  }\n\n  addBookMark = (event) => {\n    event.preventDefault();\n    if (this.state.sitename === '' && this.state.siteurl) {\n      return;\n    }\n\n    const newBookMark = {\n      sitename: this.state.sitename,\n      siteurl: this.state.siteurl,\n      id: this.state.id\n    }\n\n    const updatedBookMarks = [...this.state.bookmarks, newBookMark]\n\n    this.setState({\n      bookmarks: updatedBookMarks,\n      sitename: '',\n      siteurl: '',\n      id: uuid()\n    })\n  }\n\n  handleDelete = (id) => {\n    const filteredItems = this.state.bookmarks.filter(bookmark =>\n      bookmark.id !== id)\n\n    this.setState({\n      bookmarks: filteredItems\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"row\">\n          <div className=\"container\">\n            <h1 className=\"text-center\">Bookmarker Application</h1>\n            <InputForm\n              sitename={this.state.sitename}\n              siteurl={this.state.siteurl}\n              addBookMark={this.addBookMark}\n              handleName={this.handleName}\n              handleURL={this.handleURL}\n            />\n            <BookmarkList\n              bookmarks={this.state.bookmarks}\n              handleDelete={this.handleDelete}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}